#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

SELF="$(basename ${BASH_SOURCE})"
SELF_DIR="$( cd "$( dirname ${BASH_SOURCE} )" >/dev/null 2>&1 && pwd )"

ALPINE_MAJOR=3.10
ALPINE_VERSION=3.10.0
ALPINE_ARCH=x86_64
ALPINE_TAR_SHA256="ec3da7fb5f709a1ce912e6e31fccc5588420c5f1dcecc362c72c989532c1917a"

VERBOSE_OUT=/dev/null
CRYPTSETUP_VERBOSE_FLAGS=""

SYSDIRS=(dev mnt tmp sys run proc)

USER=$(who am i | awk '{print $1}')
GROUP=$(id -gn ${USER})

function usage() {
cat << UsageMsg
Usage: sgx-lkl-disk [ACTION] [OPTION]... [IMAGEFILE|MOUNTPOINT]
Creates and manages ext4 disk images usable by SGX-LKL.

Mandatory arguments to long options are mandatory for short options too.

Actions
 c, create                  Create a new disk image.
 s, status                  Print information on dm-crypt/dm-integrity/dm-verity
                            setup of IMAGEFILE.
 m, mount                   Mount IMAGEFILE.
 U, unmount                 Unmount MOUNTPOINT.
 h, help                    Print this help text.
 u, usage                   Print usage info.

General options
 -V, --verbose              More verbose output.

Create ('create') options
 -x, --cleanup              Clean up downloads and Docker images that would
                            otherwise get cached.
 -a, --alpine=<alpine pkg>  Create disk with Alpine image as basis with the
                            specified package(s) installed. Multiple packages
                            must be separated by a whitespace.
 -d, --docker=<image|dockerfile>
                            If the argument is a path to a Dockerfile, this
                            builds a disk image based on the specified
                            Dockerfile. If the argument is the id or name of a
                            Docker image, a disk image is built from the
                            specified Docker image.
      --nocontext           Build Docker image with no/a minimal build context.
 -i, --from-image=<path>    Create disk as a copy of the existing image at
                            <path>.
 -C, --copy=<path>          Create disk by copying directory contents or a
                            single file. Can be combined with --alpine,
                            --docker, and --from-image.
 -S, --size=bytes           Size of the disk in bytes. "k/K", "m/M", "g/G" can
                            be used as units.
 -e, --encrpyt              Enables dm-crypt disk encryption. All parameters
                            below are passed on to cryptsetup as is. See
                            cryptsetup --help for more information on them.
      --cipher=<cipher>     Sets the dm-crypt cipher (Default: aes-xts-plain64)
  -k, --key-file[=<path>]   Use key file for key. If no path is specified, a new
                            key file IMAGEFILE.key is generated.
  -K, --keyfile-size=bytes  If --key-file specifies no path, generate a new key
                            (file) of size <bytes> (Default: 64).
  -p, --passphrase=<pass>   Use <pass> as a passphrase to unlock the disk.
  -P, --pbkdf=<pbkdf>       Use <pbkdf> to derive encryption key for LUKS key
                            slot (Default: PBKDF2) (Requires cryptsetup version
                            >= 2.0.0)
  -H, --hash=<hash-alg>     Use hash-alg> to create encryption key from
                            passphrase.
 -v, --verity[=<alg>]       Use dm-verity for read-only integrity protection of
                            the disk. Use <alg> as algorithm if specified
                            (Default: hmac-sha256). Can be combined with
                            --encrypt.
 -I, --integrity[=<alg>]    Use dm-integrity for read/write integrity
                            protection of the disk. Use <alg> als algorithm if
                            specified (Default: sha256). Can be combined with
                            --encrypt. Currently standalone dm-integrity is not
                            supported. (Requires cryptsetup version >= 2.0.0 and
                            kernel version >= 4.12).

Status ('status') options:
 -v, --verity               Show dm-verity info for IMAGEFILE. This expects
                            IMAGEFILE.roothash to contain the root hash and
                            IMAGEFILE.hashoffset to contain the offset to the
                            hash metadata.

Mount ('mount') options:
 -M, --mnt-point=<path>     Mount IMAGEFILE at mount point <path>.
     --mnt-options=<opts>   Mount IMAGEFILE with the options <opts>.
 -v, --verity               Mount IMAGEFILE with dm-verity integrity protection.
                            This expects IMAGEFILE.roothash to contain the root
                            hash and IMAGEFILE.hashoffset to contain the offset
                            to the hash metadata.

NOTES on --encrypt:
  1. --encrypt requires either --key-file or --passphrase to be specified.
  2. The chosen key or passphrase has to be provided to SGX-LKL via
     SGXLKL_HD_KEY at runtime.

NOTES on --verity:
  1. --verity will generate two metadata files:
    a) IMAGEFILE.roothash, which contains the computed root hash of the
       dm-verity Merkle tree. This must be provided to SGX-LKL via
       SGXLKL_HD_VERITY at runtime.
    b) IMAGEFILE.hashoffset, which stores the offset in bytes to the Merkle
       tree on disk. It can be provided to SGX-LKL via SGXLKL_HD_VERITY_OFFSET
       at runtime, but SGX-LKL can automatically pick it up if the disk image
       file name and hash offset file names match.
  2. --verity requires additional metadata (the Merkle tree) to be stored on
     the disk. In order to accomodate this sgx-lkl-disk currently automatically
     increases the size specified via --size by 10%.

NOTES on --integrity:
  1. --integrity requires additional metadata (interspersed disk blocks with
     integrity metadata) to be stored on the disk. In order to accomodate this
     sgx-lkl-disk currently automatically increases the size specified via
     --size by 15%.

Examples:

sgx-lkl-disk create --size=100M --docker=./Dockerfile sgxlkl-disk.img
sgx-lkl-disk create --size=100M --from-image=sgxlkl-disk.img sgxlkl-disk.img
sgx-lkl-disk create --size=100M --alpine="redis memcached" sgxlkl-disk.img
sgx-lkl-disk create --size=100M --alpine="python" --copy=./my-python-app sgxlkl-disk.img
sgx-lkl-disk create --size=100M --copy=./my-root --encrypt --key-file=./my-key sgxlkl-disk.img.enc
sgx-lkl-disk create --size=100M --copy=./my-root --encrypt --key-file=./my-key --integrity sgxlkl-disk.img.enc.int
sgx-lkl-disk create --size=100M --copy=./my-root --encrypt --key-file=./my-key --verity sgxlkl-disk.img.enc.vrt
sgx-lkl-disk create --size=100M --copy=./my-root --verity sgxlkl-disk.img.vrt
sgx-lkl-disk status sgxlkl-disk.img
sgx-lkl-disk mount --mnt-point=./mnt-sgxlkl ./sgxlkl-disk.img
sgx-lkl-disk unmount ./mnt-sgxlkl
UsageMsg
}

ALPINE_BUILDENV_TEMPLATE="\
#!/bin/sh

set -e

PATH=/usr/sbin:/sbin:/usr/bin:/bin

cat << resolv > /etc/resolv.conf
nameserver 8.8.8.8
nameserver 1.1.1.1
resolv

echo \"Updating Alpine package index...\"
apk update > /dev/null
echo \"Installing \${alpine_pkgs}\"
apk add \${alpine_pkgs}
"

to_cleanup=0
function cleanup_echo() {
    if [[ "${to_cleanup}" == "0" ]]; then
        to_cleanup=1
        echo "Cleaning up temporary files..."
    fi
}

function cleanup_file() {
    if [[ ! -z "$1" ]] && [[ -e "$1" ]]; then
        cleanup_echo
        rm -r "$1"
    fi
}

function cleanup() {
    cleanup_file "${tmp_buildenv:-}"
    cleanup_file "${tmp_docker_tar:-}"
    cleanup_file "${tmp_docker_context:-}"
    cleanup_file "${tmp_image:-}"

    if [ ! -z ${tmp_mnt_point:-} ]; then
        cleanup_echo
        if mountpoint -q "${tmp_mnt_point}" &> /dev/null; then sudo umount "${tmp_mnt_point}"; fi
        rm -r "${tmp_mnt_point}"
    fi

    if [[ "$m" == 1 ]] && [[ ! -z "${loop_device:-}" ]]; then
        if ! mountpoint -q "${mnt_point}" &> /dev/null; then
            cleanup_echo
            sudo losetup -d "${loop_device}"
        fi

        if [[ -d "${mnt_point}" ]] && [[ -z "$(ls -A "${mnt_point}")" ]]; then
            cleanup_echo
            rm -r ${mnt_point}
        fi
    fi

    if [[ ! -z ${docker_container_id:-} ]] && [[ ! $(docker ps -qa | grep -q ${docker_container_id}) ]]; then
        cleanup_echo
        docker rm --force ${docker_container_id} > /dev/null
    fi

    if [[ ! -z ${tmp_cryptsetup_name:-} ]] && [[ -e "/dev/mapper/${tmp_cryptsetup_name}" ]]; then
        cleanup_echo
        sleep 1
        sudo cryptsetup close ${tmp_cryptsetup_name}
    fi

    if [[ ! -z ${tmp_loop_device:-} ]] && [[ ! -z $(losetup -l | grep "${tmp_loop_device} ") ]]; then
        cleanup_echo
        sudo losetup -d ${tmp_loop_device}
    fi

    if [ "${cleanup:-}" = 1 ]; then
        if [[ ! -z ${tmp_docker_image_id:-} ]] && [[ $(docker images -qa | grep ${tmp_docker_image_id}) ]]; then
            cleanup_echo
            docker rmi ${tmp_docker_image_id}
        fi
        if [[ ! -z ${alpine_tar:-} ]] && [[ -e ${alpine_tar} ]]; then
            cleanup_echo
            rm -r "${alpine_tar}"
        fi
    fi
}

trap 'ec=$?; cleanup; exit $ec' EXIT
trap 'exit 127' HUP INT PIPE QUIT TERM

# $1: Option name
function err_req_arg() {
    echo "$SELF: option '$1' requires an argument"
    exit 126
}

# $1: Option that requires a secondary option/argument
# $2: Secondary option/argument being required
function err_op_req_arg() {
    echo "$SELF: option '$1' requires $2 to be specified."
    exit 126
}

function err_op() {
    echo "$SELF: Exactly one of 'create', 'status', 'mount', 'unmount' is required as action."
    exit 126
}

function err_create_op() {
    echo "$SELF: Exactly one of --alpine, --docker, --from-image, --copy (combinable with others) is required with 'create'."
    exit 126
}

function err_image_src_enc() {
    echo "$SELF: Input image is encrypted ${image_src} which currently is not supported."
    exit 126
}

function err_image_src_size() {
    echo "$SELF: --size for disk image is too small to contain input image ${image_src}."
    exit 126
}

function err_passphrase_or_keyfile() {
    echo "$SELF: Either --passphrase or --key-file required when creating an encrypted disk image with --encrypt."
    exit 126
}

function err_passphrase_or_keyfile_mount() {
    echo "$SELF: Either --passphrase or --key-file required when mounting an encrypted disk image with 'mount'."
    exit 126
}

# $1: File name
function warn_exists() {
    read -p "Warning: The file $1 already exists! Overwrite? [y/n] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[y]$ ]]; then exit 0; fi
}

# $1: Command/application being required
function req() {
    [[ -x "$(command -v $1)" ]] || (echo "The following application/package is required and could not be found: $1."; exit 1)
}

# $1: Option that requires secondary argument
# $2: Secondary argument/option being required
# $3: Value of secondary argument/option
function req_arg() {
    if  [[ -z "$3" ]] || [[ "$3" = 0 ]]; then err_op_req_arg "$1" "$2"; fi
}

# $1: Required minimum cryptsetup version
# $2: Option that requires this version
function req_cryptsetup_version() {
    req cryptsetup
    cryptsetup_v="$(cryptsetup --version | cut -f2 -d' ')"
    if [[ "$1" != "${cryptsetup_v}" ]] && [[ "$1" != "$(echo -ne "${cryptsetup_v}\n$1" | sort -V | head -n1)" ]]; then
        echo "Option $2 requires cryptsetup version $1 or later. Exiting..."
        exit 1
    fi
}

# $1: Required minimum kernel version
# $2: Option that requires this version
function req_min_kernel() {
    kernel_v="$(uname -r | grep -Po '^[0-9]+\.[0-9]+')"
    if [[ "$1" != "${kernel_v}" ]] && [[ "$1" != "$(echo -ne "${kernel_v}\n$1" | sort -V | head -n1)" ]]; then
        echo "Option $2 requires kernel version $1 or later. Exiting..."
        exit 1
    fi
}

# $1: String consisting of a number and zero or one suffixes [kK]/[mM]/[gG].
function to_bytes() {
    bytes=$(echo "$1/1" | sed -e "s/[gG]/*1024*1024*1024/g;s/[mM]/*1024*1024/;s/[kK]/*1024/" | bc)
    echo "$bytes"
}

# $1: String to be hashed
function hash_str() {
    echo "$1" | sha256sum | cut -f1 -d' '
}

# $1: Path to image
function is_encrypted() {
    if [[ ! -x "$(command -v cryptsetup)" ]]; then
        echo "unknown";
    elif cryptsetup isLuks "$1"; then
        echo "yes";
    else echo "no"; fi
}

# $1: No. of bytes
# $2 Path to new key file
function gen_keyfile() {
    head -c "$1" /dev/urandom > "$2"
    echo "$2"
}


function create_from_alpine() {
    req curl
    req tar

    echo "Creating base image from Alpine with packages ${alpine_pkgs}..."

    [[ -z $HOME ]] && alpine_tar_dir="." || alpine_tar_dir="$HOME/.cache/sgxlkl"
    mkdir -p ${alpine_tar_dir}
    alpine_tar="${alpine_tar_dir}/alpine-minirootfs-${ALPINE_VERSION}-${ALPINE_ARCH}.tar.gz"
    alpine_url="https://nl.alpinelinux.org/alpine/v${ALPINE_MAJOR}/releases/${ALPINE_ARCH}/alpine-minirootfs-${ALPINE_VERSION}-${ALPINE_ARCH}.tar.gz"
    while true; do
        if [[ ! -e ${alpine_tar} ]]; then
            echo "Downloading Alpine miniroot image to ${alpine_tar}..."
            curl -s -S -L -o "${alpine_tar}" "${alpine_url}"
        else
            echo "Reusing cached Alpine miniroot image ${alpine_tar}..."
        fi

        echo "Verifiying checksum of ${alpine_tar}..."
        if [[ ! -z "$ALPINE_TAR_SHA256" ]] && ! echo "${ALPINE_TAR_SHA256} ${alpine_tar}" | sha256sum --check &> /dev/null; then
            read -p "Warning! Checksum mismatch for ${alpine_tar}! Redownload/Ignore/Cancel? [r/i/c] " -n 1 -r
            echo
            case "$REPLY" in
                r|R ) rm ${alpine_tar}; continue;;
                i|I ) break;;
                * ) echo "Exiting..."; exit 0;;
            esac
        else
            break
        fi
    done

    echo "Creating disk image file..."

    tmp_mnt_point=$(mktemp -d -t sgxlkl_tmp_mnt_XXX)
    tmp_buildenv=$(mktemp -t sgxlkl_tmp_buildenv_XXX)
    echo "${ALPINE_BUILDENV_TEMPLATE}" | sed -e "s/\${alpine_pkgs}/${alpine_pkgs}/" > ${tmp_buildenv}

    dd if=/dev/zero of="${disk_image}" count=$((${disk_size}/512)) ibs=512 &> ${VERBOSE_OUT}
    mkfs.ext4 "${disk_image}" &> ${VERBOSE_OUT}
    sudo mount -t ext4 -o loop "${disk_image}" ${tmp_mnt_point}
    sudo tar -C ${tmp_mnt_point} -xf ${alpine_tar}
    if [[ ! -z "${copy_src}" ]]; then sudo cp -r ${copy_src} ${tmp_mnt_point}; fi
    for sysdir in "${SYSDIRS[@]}"; do
        if [[ ! -e "${tmp_mnt_point}/${sysdir}" ]]; then
          echo "Creating required directory /${sysdir}..."
          sudo mkdir -p "${tmp_mnt_point}/${sysdir}"
        fi
    done
    sudo install ${tmp_buildenv} ${tmp_mnt_point}/usr/sbin/buildenv.sh
    sudo chroot ${tmp_mnt_point} /bin/sh /usr/sbin/buildenv.sh
    sudo umount ${tmp_mnt_point}
    sudo chown ${USER}:${GROUP} "${disk_image}"
}

function create_from_docker() {
    req docker
    tmp_mnt_point=$(mktemp -d -t sgxlkl_tmp_mnt_XXX)

    # If dockerfile is not specified, docker_image must already be set.
    if [[ ! -z "${dockerfile:-}"  ]]; then
        if [[ "${nocontext:-}" == 1 ]]; then
            tmp_docker_context="$(mktemp -d -t sgxlkl_tmp_dc_XXX)"
            cp "${dockerfile}" ${tmp_docker_context}
            dockerfile="${tmp_docker_context}/$(basename ${dockerfile})"
            docker_context=${tmp_docker_context}
        else docker_context="$(dirname ${dockerfile})"; fi

        echo "Creating ${disk_image} from Dockerfile ${dockerfile}..."

        echo "Building Docker image..."
        tmp_docker_image_id=$(cat /proc/sys/kernel/random/uuid) # Can be cleaned up at exit.
        docker_image=${tmp_docker_image_id}
        docker build --rm=true -t ${docker_image} -f "${dockerfile}" "${docker_context}" > ${VERBOSE_OUT}
    fi

    echo "Creating and exporting Docker container..."
    docker_container_id=$(docker create ${docker_image})
    tmp_docker_tar=$(mktemp -t sgxlkl_tmp_docker_tar_XXX)
    docker export -o ${tmp_docker_tar} ${docker_container_id}

    echo "Creating disk image file..."
    dd if=/dev/zero of="${disk_image}" count=$((${disk_size}/512)) ibs=512 &> ${VERBOSE_OUT}
    mkfs.ext4 "${disk_image}" &> ${VERBOSE_OUT}
    sudo mount -t ext4 -o loop "${disk_image}" ${tmp_mnt_point};
    sudo tar -C ${tmp_mnt_point} -xf ${tmp_docker_tar}
    if [[ ! -z "${copy_src}" ]]; then sudo cp -r ${copy_src} ${tmp_mnt_point}; fi
    for sysdir in "${SYSDIRS[@]}"; do
        if [[ ! -e "${tmp_mnt_point}/${sysdir}" ]]; then
          echo "Creating required directory /${sysdir}..."
          sudo mkdir -p "${tmp_mnt_point}/${sysdir}"
        fi
    done
    sudo umount ${tmp_mnt_point}
    sudo chown ${USER}:${GROUP} "${disk_image}"
}

function create_from_image() {
    req e2fsck
    req resize2fs
    [[ "$(is_encrypted ${image_src})" == "yes" ]] && err_image_src_enc || true

    src_size=$(du -b "${image_src}" | cut -f1)
    [[ "${src_size}" -gt "${disk_size}" ]] && err_image_src_size || true

    echo "Creating base image from source image ${image_src}..."

    if [[ "${disk_image}" -ef "${image_src}" ]]; then
        tmp_image=$(mktemp -t sgxlkl_tmp_image_XXX)
        image_dst="${tmp_image}"
    else
        image_dst="${disk_image}"
    fi

    tmp_mnt_point=$(mktemp -d -t sgxlkl_tmp_mnt_XXX)

    cp "${image_src}" "${image_dst}"
    size_in_kb="$(((${disk_size} + 1023) / 1024))k"
    e2fsck -p -f "${image_dst}" > ${VERBOSE_OUT} || true
    resize2fs "${image_dst}" "${size_in_kb}" &> ${VERBOSE_OUT}
    sudo mount -t ext4 -o loop "${disk_image}" ${tmp_mnt_point}
    if [[ ! -z "${copy_src}" ]]; then sudo cp -r ${copy_src} ${tmp_mnt_point}; fi
    for sysdir in "${SYSDIRS[@]}"; do
        if [[ ! -e "${tmp_mnt_point}/${sysdir}" ]]; then
          echo "Creating required directory /${sysdir}..."
          sudo mkdir -p "${tmp_mnt_point}/${sysdir}"
        fi
    done
    sudo umount ${tmp_mnt_point}
    sudo chown ${USER}:${GROUP} "${disk_image}"

    [[ ! -z "${tmp_image:-}" ]] && mv "${tmp_image}" "${disk_image}" || true
}

function create_from_dir() {
    echo "Creating base image from directory/file ${copy_src%/.*}..."
    tmp_mnt_point=$(mktemp -d -t sgxlkl_tmp_mnt_XXX)

    dd if=/dev/zero of="${disk_image}" count=$((${disk_size}/512)) ibs=512 &> ${VERBOSE_OUT}
    mkfs.ext4 "${disk_image}" &> ${VERBOSE_OUT}
    sudo mount -t ext4 -o loop "${disk_image}" ${tmp_mnt_point}
    sudo cp -r ${copy_src} ${tmp_mnt_point}
    for sysdir in "${SYSDIRS[@]}"; do
        if [[ ! -e "${tmp_mnt_point}/${sysdir}" ]]; then
          echo "Creating required directory /${sysdir}..."
          sudo mkdir -p "${tmp_mnt_point}/${sysdir}"
        fi
    done
    sudo umount ${tmp_mnt_point}
    sudo chown ${USER}:${GROUP} "${disk_image}"
}

function encrypt() {
    req losetup
    req cryptsetup

    echo "Encrypting ${disk_image}..."

    tmp_image=$(mktemp -t sgxlkl_tmp_image_XXX)
    tmp_loop_device=$(losetup -f)
    tmp_cryptsetup_name=$(cat /proc/sys/kernel/random/uuid)

    cipher=${cipher:-"aes-xts-plain64"}
    key_size=${key_size:-256}
    hash=${hash:-sha256}

    echo "  Cipher: ${cipher}"
    echo "  Key size: ${key_size}"
    echo "  Hash Algorithm: ${hash}"

    if [[ ! -z "${int_alg:-}" ]]; then
        integrity_cmd="--integrity ${int_alg}"
        pbkdf=${pbkdf:-pbkdf2}
        pbkdf_cmd="--pbkdf=${pbkdf}"
        type="luks2"
        echo "  Integrity: ${int_alg}"
        echo "  PBKDF: ${pbkdf}"
    else
        integrity_cmd=""
        type="luks"
        echo "  Integrity: Disabled"
        pbkdf_cmd=""
    fi

    passphrase_cmd=""
    keyfile_cmd=""
    if [[ ! -z "${passphrase:-}" ]]; then
        echo "Using passphrase for disk encryption..."
    elif [[ "$k" == 1 ]]; then
        if [[ -z "${keyfile:-}" ]]; then
            echo "Generating new key file ${disk_image}.key of size ${keyfile_size:-64} bytes..."
            keyfile="$(gen_keyfile ${keyfile_size:-64} ${disk_image}.key)"
        fi
        keyfile_cmd="--key-file=${keyfile}"
        echo "Using key file ${keyfile} for disk encryption..."
    else err_passphrase_or_keyfile; fi

    echo "Creating encrypted disk..."
    dd if=/dev/zero of="${tmp_image}" count=$((${disk_size_enc} / 512)) bs=512 &> ${VERBOSE_OUT}
    sudo losetup ${tmp_loop_device} "${tmp_image}"
    echo "Formatting encrypted disk..."
    if [[ ! -z "${passphrase:-}" ]]; then
        echo -ne "${passphrase}\n" | sudo cryptsetup ${CRYPTSETUP_VERBOSE_FLAGS} --type ${type} luksFormat ${tmp_loop_device} --batch-mode ${pbkdf_cmd} --cipher=${cipher} --key-size ${key_size} --hash ${hash} ${integrity_cmd}
        echo "Opening encrypted disk..."
        echo -ne "${passphrase}\n" | sudo cryptsetup ${CRYPTSETUP_VERBOSE_FLAGS} open ${keyfile_cmd} ${tmp_loop_device} ${tmp_cryptsetup_name}
    else
        sudo cryptsetup ${CRYPTSETUP_VERBOSE_FLAGS} --type ${type} luksFormat ${tmp_loop_device} --batch-mode ${keyfile_cmd} ${pbkdf_cmd} --cipher=${cipher} --key-size ${key_size} --hash ${hash} ${integrity_cmd}
        echo "Opening encrypted disk..."
        sudo cryptsetup ${CRYPTSETUP_VERBOSE_FLAGS} open ${keyfile_cmd} ${tmp_loop_device} ${tmp_cryptsetup_name}
    fi
    sleep 1
    echo "Copying base image to encrypted disk..."
    sudo dd if="${disk_image}" of="/dev/mapper/${tmp_cryptsetup_name}" bs=1M &> ${VERBOSE_OUT}
    sleep 1
    sudo cryptsetup close ${tmp_cryptsetup_name}
    sudo losetup -d ${tmp_loop_device}
    sudo chown ${USER}:${GROUP} "${tmp_image}"

    tmp_loop_device= # Don't try to detach loop device again in clean_exit.

    mv "${tmp_image}" "${disk_image}"

    if [[ "$v" == 1 ]]; then verity; fi
}

function integrity() {
    echo "Standalone integrity protection is not yet supported. Exiting..."
    exit 1
}

function verity() {
    req losetup
    req veritysetup

    echo "Creating verity device for data integrity..."

    tmp_image=$(mktemp -t sgxlkl_tmp_image_XXX)
    tmp_loop_device=$(losetup -f)

    data_blocks=$((${disk_size_enc:-${disk_size}} / 512))

    hash=${hash:-sha256}

    echo "Creating integrity-protected (verity) disk..."
    e2fsck -p -f "${disk_image}" > ${VERBOSE_OUT} || true
    dd if=/dev/zero of="${tmp_image}" count=$((${disk_size_verity} / 512)) bs=512 &> ${VERBOSE_OUT}
    sudo losetup ${tmp_loop_device} "${tmp_image}"
    echo "Copying base image to integrity-protected disk..."
    sudo dd if="${disk_image}" of="${tmp_loop_device}" bs=1M &> ${VERBOSE_OUT}
    echo "Calculating and storing integrity metadata..."
    verity_out=$(sudo veritysetup ${CRYPTSETUP_VERBOSE_FLAGS} --data-block-size=512 --hash-block-size=512 --data-blocks=${data_blocks} --hash-offset=$((${data_blocks} * 512)) --hash=${hash} format ${tmp_loop_device} ${tmp_loop_device} |& tee ${VERBOSE_OUT})
    root_hash=$(echo "${verity_out}" | grep "Root hash:" | cut -f2)
    sleep 1
    sudo losetup -d ${tmp_loop_device}
    sudo chown ${USER}:${GROUP} "${tmp_image}"

    echo "  Hash Algorithm: ${hash}"
    echo "  Hash Offset: $((${data_blocks} * 512))"
    echo "  Root Hash: ${root_hash}"

    echo "${root_hash}" > "${disk_image}.roothash"
    echo "Root hash stored in ${disk_image}.roothash."
    echo "$((${data_blocks} * 512))" > "${disk_image}.hashoffset"
    echo "Hash offset stored in ${disk_image}.hashoffset."

    tmp_loop_device= # Don't try to detach loop device again in clean_exit.

    mv "${tmp_image}" "${disk_image}"
}

function create() {
    req_arg "create" "--size" $sz

    disk_size=$(to_bytes "$sz")
    disk_size=$(( (${disk_size} + 511) / 512 * 512)) # 512 byte alignment

    if [[ -e ${disk_image} ]]; then warn_exists ${disk_image}; fi

    if [[ ! $(($a + $d + $im)) == 1 ]] && [[ -z "${copy_src}" ]]; then err_create_op; # Exactly one of the below ops has to be specified.
    elif [ "$a" = 1 ]; then create_from_alpine;
    elif [ "$d" = 1 ]; then create_from_docker;
    elif [ "$im" = 1 ]; then create_from_image;
    else create_from_dir; fi

    luks_header_size=$(to_bytes "2M") # LUKS header size should be <= 2 MiB

    # TODO Proper calculation for integrity overhead, currently 15%
    [[ "$i" == 1 ]] && integrity_overhead=$((${disk_size} / 100 * 15)) || integrity_overhead=0

    if [[ "$e" == 1 ]]; then
        disk_size_enc=$((${disk_size} + ${luks_header_size} + ${integrity_overhead}))
        disk_size_enc=$(( (${disk_size_enc} + 511) / 512 * 512)) # 512 byte alignment
    fi

    if [[ "$v" == 1 ]]; then
        # TODO Proper calculation for verity overhead, currently 10%
        verity_overhead=$((${disk_size} / 10))
        disk_size_verity=$((${disk_size} + ${luks_header_size} + ${verity_overhead}))
        disk_size_verity=$(( (${disk_size_verity} + 511) / 512 * 512)) # 512 byte alignment
    fi

    if [ "$e" = 1 ]; then encrypt;
    elif [ "$i" = 1 ]; then integrity; # encryption + integrity (via dm-integrity) is handled within 'encrypt'
    elif [ "$v" = 1 ]; then verity; fi # encryption + verity (via dm-verity) is handled within 'encrypt'

    echo "Succesfully created ${disk_image}."
}

function status() {
    echo "Determining status of ${disk_image}..."

    if [[ "$(is_encrypted ${disk_image})" == "unknown" ]]; then
        echo "Device status cannot be determined because cryptsetup installation could not be found."
        exit 0
    elif [[ "$(is_encrypted ${disk_image})" == "yes" ]]; then
        echo "Device is encrypted. Cryptsetup info:"
        if [[ ! -z "${passphrase:-}" ]] || [[ ! -z "${keyfile:-}" ]]; then
            tmp_loop_device=$(losetup -f)
            sudo losetup ${tmp_loop_device} "${disk_image}"
            crypt_dev_id=$(hash_str ${tmp_loop_device})

            if [[ ! -z "${passphrase:-}" ]]; then
                echo -ne "${passphrase}\n" | sudo cryptsetup open ${tmp_loop_device} "${crypt_dev_id}" &> ${VERBOSE_OUT}
            elif [[ ! -z "${keyfile:-}" ]]; then
                sudo cryptsetup open --key-file=${keyfile} ${tmp_loop_device} "${crypt_dev_id}" &> ${VERBOSE_OUT}
            fi

            sudo cryptsetup status "${crypt_dev_id}" | grep -v "is active"
            sleep 1
            sudo cryptsetup close "${crypt_dev_id}"
        else
            echo "Device is encrypted but no key file or passphrase was provided. LUKS Dump:"
            cryptsetup luksDump "${disk_image}" | awk '{print "  "$0}'
        fi
    else
        echo "Device is not encrypted."
    fi

    if [[ "$v" == 1 ]]; then
        if [[ -z "${tmp_loop_device:-}" ]];then
            tmp_loop_device=$(losetup -f)
            sudo losetup ${tmp_loop_device} "${disk_image}"
        fi
        verity_dev_id=$(hash_str ${tmp_loop_device})
        root_hash=$(cat "${disk_image}.roothash")
        [[ -e "${disk_image}.hashoffset" ]] && hash_offset_parm="--hash-offset=$(cat ${disk_image}.hashoffset)"
        if sudo veritysetup open ${hash_offset_parm:-} ${tmp_loop_device} "${verity_dev_id}" ${tmp_loop_device} "${root_hash}" &> ${VERBOSE_OUT}; then
            echo "Veritysetup info:"
            sudo veritysetup status "${verity_dev_id}" | grep -v "is active"
            sleep 1
            sudo veritysetup close "${verity_dev_id}"
        fi
    fi
}

function mount_enc() {
    passphrase_cmd=""
    keyfile_cmd=""
    if [[ ! -z "${passphrase:-}" ]]; then
        passphrase_cmd="echo -ne '${passphrase}\n' |"
        echo "Using passphrase for disk decryption..."
    elif [[ "$k" == 1 ]]; then
        [[ -z "${keyfile}" ]] && keyfile="${disk_image}.key" || true
        keyfile_cmd="--key-file=${keyfile}"
        echo "Using key file ${keyfile} for disk decryption..."
    else err_passphrase_or_keyfile_mount; fi

    #loop_device=$(losetup -f)
    cryptsetup_name=$(cat /proc/sys/kernel/random/uuid)

    sudo /bin/bash -euo pipefail -c "\
        ${passphrase_cmd} cryptsetup open ${keyfile_cmd} ${disk_image} ${cryptsetup_name}; \
        mount ${mnt_options_cmd} -t ext4 /dev/mapper/${cryptsetup_name} ${mnt_point}; \
        chown ${USER}:${GROUP} "${mnt_point}"
    "
}

function mount() {
    req_arg "mount" "--mnt-point" $mnt_point

    echo "Mounting ${disk_image}..."

    mkdir -p "${mnt_point}"

    [[ ! -z "${mnt_options:-}" ]] && mnt_options_cmd="-o ${mnt_options:-}" || mnt_options_cmd=""

    if [[ "$v" == 1 ]]; then
        : # TODO veritysetup open
    fi

    if [[ "$(is_encrypted ${disk_image})" == "yes" ]]; then
        mount_enc
    else
        sudo mount ${mnt_options_cmd} -t ext4 -o loop ${disk_image} ${mnt_point}
        sudo chown ${USER}:${GROUP} "${mnt_point}"
    fi

    echo "Successfully mounted ${disk_image} at ${mnt_point}";
}

function unmount() {
    req findmnt

    device="$(findmnt -n -o SOURCE "${mnt_point}")" || true
    if [[ -z "${device}" ]]; then
        echo "${mnt_point} does not seem to be a mount point. Aborting..."
        exit 1
    elif [[ "${device}" =~ ^/dev/mapper/ ]]; then
        dm_target=${device#"/dev/mapper/"}
    fi

    echo "Unmounting ${mnt_point}..."

    sudo umount "${mnt_point}"
    # TODO veritysetup/integritysetup
    [[ ! -z "${dm_target:-}" ]] && sudo cryptsetup close "${dm_target}" || true

    echo "Deleting empty mount point directory ${mnt_point}..."
    if [[ -d "${mnt_point}" ]] && [[ -z "$(ls -A "${mnt_point}")" ]]; then
        rm -r ${mnt_point}
    fi

    echo "Successfully unmounted ${mnt_point}";
}

# <Short option>,<Long option>,<(no-argument)|: (mandatory)|:: (optional)>
OPTIONS="\
U,usage, \
h,help, \
M,mnt-point,: \
,mnt-options,: \
x,cleanup, \
V,verbose, \
a,alpine,: \
d,docker,: \
,nocontext, \
C,copy,: \
i,from-image,: \
e,encrypt, \
,cipher,: \
p,passphrase,: \
k,key-file,:: \
K,keyfile-size,: \
P,pbkdf,: \
H,hash,: \
v,verity,:: \
I,integrity,:: \
S,size,: \
"
c=0 s=0 m=0 u=0 a=0 d=0 e=0 i=0 v=0 im=0 sz=0 k=0 copy_src=""

case "$1" in
    u|h|usage|help)
        usage
        exit 0
        ;;
    c|create)
        c=1
        shift
        ;;
    s|status)
        s=1
        shift
        ;;
    m|mount)
        m=1
        shift
        ;;
    U|unmount)
        u=1
        shift
        ;;
esac


IFS=' ' read -r -a OPTS_ARR <<< "${OPTIONS}"
for OPT in "${OPTS_ARR[@]}"; do
    SHORTOPT=$(echo "${OPT}" | cut -d"," -f1)
    LONGOPT=$(echo "${OPT}" | cut -d"," -f2)
    OPT_ARG_REQ=$(echo "${OPT}" | cut -d"," -f3)
    SHORTOPTS="${SHORTOPTS:-}${SHORTOPT}${OPT_ARG_REQ}"
    LONGOPTS="${LONGOPTS:-}${LONGOPT}${OPT_ARG_REQ},"
done

if ! ARGS=$(getopt --options=$SHORTOPTS --longoptions=$LONGOPTS --name "$0" -- "$@"); then
    exit 2
fi
eval set -- "$ARGS"

while true; do
    case "$1" in
        -u|-h|--usage|--help)
            usage
            exit 0
            ;;
        -x|--cleanup)
            cleanup=1
            shift
            ;;
        -V|--verbose)
            # Duplicate stdout fd so we can print to stdout from captured subshells.
            exec 5>&1
            VERBOSE_OUT=/dev/fd/5
            CRYPTSETUP_VERBOSE_FLAGS="-v --debug"
            shift
            ;;
        -a|--alpine)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            a=1
            alpine_pkgs=$2
            shift 2
            ;;
        -d|--docker)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            req docker
            d=1
            if [[ -e "$2" ]]; then
                dockerfile=$2
            else
                docker_image=$2
            fi
            shift 2
            ;;
        --nocontext)
            nocontext=1
            shift
            ;;
        -C|--copy)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            if [[ -d "$2" ]]; then copy_src="$2/."; else copy_src="$2"; fi
            shift 2
            ;;
        -i|--from-image)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            im=1
            image_src=$2
            shift 2
            ;;
        -e|--encrypt)
            e=1
            shift
            ;;
        --cipher)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            cipher="$2"
            shift 2
            ;;
        -p|--passphrase)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            passphrase="$2"
            shift 2
            ;;
        -k|--key-file)
            k=1
            if [[ ! -z "$2" ]]; then
                keyfile=$2;
                if [[ ! -e "${keyfile}" ]]; then
                    echo "The specified key file ${keyfile} does not exist. Exiting..."
                    exit 1
                fi
            fi
            shift 2
            ;;
        --keyfile-size)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            keyfile_size="$2"
            shift 2
            ;;
        -P|--pbkdf)
            req_cryptsetup_version "2.0.0" "--pbkdf"
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            pbkdf="$2"
            shift 2
            ;;
        -H|--hash)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            hash="$2"
            shift 2
            ;;
        -I|--integrity)
            req_min_kernel "4.12" "--integrity"
            req_cryptsetup_version "2.0.0" "--integrity"
            i=1
            if [[ -z "$2" ]]; then int_alg="hmac-sha256"; else int_alg=$2; fi
            shift 2
            ;;
        -v|--verity)
            v=1
            if [[ -z "$2" ]]; then ver_alg="sha256"; else ver_alg=$2; shift; fi
            shift 2
            ;;
        -S|--size)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            sz="$2"
            shift 2
            ;;
        --mnt-point)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            mnt_point="$2"
            shift 2
            ;;
        --mnt-options)
            if [[ $2 == -* ]]; then err_req_arg $1; fi
            mnt_options="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Unknown option: $1"
            exit 126
            ;;
    esac
done

if [[ $# -ne 1 ]]; then
    echo "$0: A single file name for the disk image or mount point (with 'unmount') is required as argument."
    exit 126
fi

[[ "$u" == 1 ]] && mnt_point=$1 || disk_image=$1

if [[ ! $(($c + $s + $m + $u)) == 1 ]]; then err_op; # Exactly one of the below ops has to be specified.
elif [ "$c" = 1 ]; then create;
elif [ "$s" = 1 ]; then status;
elif [ "$m" = 1 ]; then mount;
elif [ "$u" = 1 ]; then unmount; fi
